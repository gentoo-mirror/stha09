From 55a6d0faf8921177b7ac82e8b566175f6250418c Mon Sep 17 00:00:00 2001
From: Stephan Hartmann <stha09@googlemail.com>
Date: Thu, 6 Jan 2022 12:05:08 +0000
Subject: [PATCH] GCC: fix ALWAYS_INLINE/NOINLINE mix in base::PartitionRoot

Some methods in base::PartitionRoot are declared NOINLINE and later
in the definition ALWAYS_INLINE. GCC warns and errors out with
function that are not inlineable. Mark the definition NOINLINE as
well.
---
 .../allocator/partition_allocator/partition_root.h | 14 +++++++-------
 1 file changed, 7 insertions(+), 7 deletions(-)

diff --git a/base/allocator/partition_allocator/partition_root.h b/base/allocator/partition_allocator/partition_root.h
index ff2d857..632f413 100644
--- a/base/allocator/partition_allocator/partition_root.h
+++ b/base/allocator/partition_allocator/partition_root.h
@@ -978,7 +978,7 @@ ALWAYS_INLINE void* PartitionRoot<thread_safe>::AllocFromBucket(
 
 // static
 template <bool thread_safe>
-ALWAYS_INLINE void PartitionRoot<thread_safe>::Free(void* ptr) {
+NOINLINE void PartitionRoot<thread_safe>::Free(void* ptr) {
 #if defined(MEMORY_TOOL_REPLACES_ALLOCATOR)
   free(ptr);
 #else
@@ -1795,20 +1795,20 @@ ALWAYS_INLINE void* PartitionRoot<thread_safe>::AlignedAllocFlags(
 }
 
 template <bool thread_safe>
-ALWAYS_INLINE void* PartitionRoot<thread_safe>::Alloc(size_t requested_size,
-                                                      const char* type_name) {
+NOINLINE void* PartitionRoot<thread_safe>::Alloc(size_t requested_size,
+                                                 const char* type_name) {
   return AllocFlags(0, requested_size, type_name);
 }
 
 template <bool thread_safe>
-ALWAYS_INLINE void* PartitionRoot<thread_safe>::Realloc(void* ptr,
-                                                        size_t new_size,
-                                                        const char* type_name) {
+NOINLINE void* PartitionRoot<thread_safe>::Realloc(void* ptr,
+                                                   size_t new_size,
+                                                   const char* type_name) {
   return ReallocFlags(0, ptr, new_size, type_name);
 }
 
 template <bool thread_safe>
-ALWAYS_INLINE void* PartitionRoot<thread_safe>::TryRealloc(
+NOINLINE void* PartitionRoot<thread_safe>::TryRealloc(
     void* ptr,
     size_t new_size,
     const char* type_name) {
-- 
2.34.1

