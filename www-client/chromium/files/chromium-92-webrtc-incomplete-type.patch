From e7fab665daf1f1e61bdb0979d7b14857b9281771 Mon Sep 17 00:00:00 2001
From: Stephan Hartmann <stha09@googlemail.com>
Date: Mon, 3 May 2021 09:59:29 +0000
Subject: [PATCH] libstdc++: fix incomplete type in rtcp_receiver

libstdc++ does not allow incomplete type for T2 with std::pair<T1,T2>,
which is used by std::unordered_map. Include full definition of
TmmbrInformation, RrtrInformation and LastFirStatus.
---
 .../modules/rtp_rtcp/source/rtcp_receiver.cc  | 38 ----------------
 .../modules/rtp_rtcp/source/rtcp_receiver.h   | 43 +++++++++++++++++--
 2 files changed, 40 insertions(+), 41 deletions(-)

diff --git a/third_party/webrtc/modules/rtp_rtcp/source/rtcp_receiver.cc b/third_party/webrtc/modules/rtp_rtcp/source/rtcp_receiver.cc
index 361da6c..104b61b 100644
--- a/third_party/webrtc/modules/rtp_rtcp/source/rtcp_receiver.cc
+++ b/third_party/webrtc/modules/rtp_rtcp/source/rtcp_receiver.cc
@@ -116,44 +116,6 @@ struct RTCPReceiver::PacketInformation {
   std::unique_ptr<rtcp::LossNotification> loss_notification;
 };
 
-// Structure for handing TMMBR and TMMBN rtcp messages (RFC5104, section 3.5.4).
-struct RTCPReceiver::TmmbrInformation {
-  struct TimedTmmbrItem {
-    rtcp::TmmbItem tmmbr_item;
-    int64_t last_updated_ms;
-  };
-
-  int64_t last_time_received_ms = 0;
-
-  bool ready_for_delete = false;
-
-  std::vector<rtcp::TmmbItem> tmmbn;
-  std::map<uint32_t, TimedTmmbrItem> tmmbr;
-};
-
-// Structure for storing received RRTR RTCP messages (RFC3611, section 4.4).
-struct RTCPReceiver::RrtrInformation {
-  RrtrInformation(uint32_t ssrc,
-                  uint32_t received_remote_mid_ntp_time,
-                  uint32_t local_receive_mid_ntp_time)
-      : ssrc(ssrc),
-        received_remote_mid_ntp_time(received_remote_mid_ntp_time),
-        local_receive_mid_ntp_time(local_receive_mid_ntp_time) {}
-
-  uint32_t ssrc;
-  // Received NTP timestamp in compact representation.
-  uint32_t received_remote_mid_ntp_time;
-  // NTP time when the report was received in compact representation.
-  uint32_t local_receive_mid_ntp_time;
-};
-
-struct RTCPReceiver::LastFirStatus {
-  LastFirStatus(int64_t now_ms, uint8_t sequence_number)
-      : request_ms(now_ms), sequence_number(sequence_number) {}
-  int64_t request_ms;
-  uint8_t sequence_number;
-};
-
 RTCPReceiver::RTCPReceiver(const RtpRtcpInterface::Configuration& config,
                            ModuleRtpRtcp* owner)
     : clock_(config.clock),
diff --git a/third_party/webrtc/modules/rtp_rtcp/source/rtcp_receiver.h b/third_party/webrtc/modules/rtp_rtcp/source/rtcp_receiver.h
index 918d349..696f034 100644
--- a/third_party/webrtc/modules/rtp_rtcp/source/rtcp_receiver.h
+++ b/third_party/webrtc/modules/rtp_rtcp/source/rtcp_receiver.h
@@ -25,6 +25,7 @@
 #include "modules/rtp_rtcp/source/rtcp_nack_stats.h"
 #include "modules/rtp_rtcp/source/rtcp_packet/dlrr.h"
 #include "modules/rtp_rtcp/source/rtp_rtcp_interface.h"
+#include "modules/rtp_rtcp/source/rtcp_packet/tmmb_item.h"
 #include "rtc_base/synchronization/mutex.h"
 #include "rtc_base/thread_annotations.h"
 #include "system_wrappers/include/ntp_time.h"
@@ -143,9 +144,45 @@ class RTCPReceiver final {
   };
 
   struct PacketInformation;
-  struct TmmbrInformation;
-  struct RrtrInformation;
-  struct LastFirStatus;
+
+  // Structure for handing TMMBR and TMMBN rtcp messages (RFC5104,
+  // section 3.5.4).
+  struct TmmbrInformation {
+    struct TimedTmmbrItem {
+      rtcp::TmmbItem tmmbr_item;
+      int64_t last_updated_ms;
+    };
+
+    int64_t last_time_received_ms = 0;
+
+    bool ready_for_delete = false;
+
+    std::vector<rtcp::TmmbItem> tmmbn;
+    std::map<uint32_t, TimedTmmbrItem> tmmbr;
+  };
+
+  // Structure for storing received RRTR RTCP messages (RFC3611, section 4.4).
+  struct RrtrInformation {
+    RrtrInformation(uint32_t ssrc,
+                    uint32_t received_remote_mid_ntp_time,
+                    uint32_t local_receive_mid_ntp_time)
+        : ssrc(ssrc),
+          received_remote_mid_ntp_time(received_remote_mid_ntp_time),
+          local_receive_mid_ntp_time(local_receive_mid_ntp_time) {}
+
+    uint32_t ssrc;
+    // Received NTP timestamp in compact representation.
+    uint32_t received_remote_mid_ntp_time;
+    // NTP time when the report was received in compact representation.
+    uint32_t local_receive_mid_ntp_time;
+  };
+
+  struct LastFirStatus {
+    LastFirStatus(int64_t now_ms, uint8_t sequence_number)
+        : request_ms(now_ms), sequence_number(sequence_number) {}
+    int64_t request_ms;
+    uint8_t sequence_number;
+  };
 
   // TODO(boivie): `ReportBlockDataMap` and `ReportBlockMap` should be converted
   // to std::unordered_map, but as there are too many tests that assume a
-- 
2.26.3

