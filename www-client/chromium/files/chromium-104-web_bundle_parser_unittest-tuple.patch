diff --git a/components/web_package/web_bundle_parser_unittest.cc b/components/web_package/web_bundle_parser_unittest.cc
index 4095159..45b782c 100644
--- a/components/web_package/web_bundle_parser_unittest.cc
+++ b/components/web_package/web_bundle_parser_unittest.cc
@@ -84,7 +84,7 @@ class TestDataSource : public mojom::BundleDataSource {
 };
 
 using ParseBundleResult =
-    std::pair<mojom::BundleMetadataPtr, mojom::BundleMetadataParseErrorPtr>;
+    std::tuple<mojom::BundleMetadataPtr, mojom::BundleMetadataParseErrorPtr>;
 
 ParseBundleResult ParseBundle(TestDataSource* data_source,
                               const GURL& base_url = GURL()) {
@@ -101,14 +101,15 @@ ParseBundleResult ParseBundle(TestDataSource* data_source,
       future;
   parser.ParseMetadata(future.GetCallback());
   ParseBundleResult result = future.Take();
-  EXPECT_TRUE((result.first && !result.second) ||
-              (!result.first && result.second));
+  EXPECT_TRUE((std::get<0>(result) && !std::get<1>(result)) ||
+              (!std::get<0>(result) && std::get<1>(result)));
   return result;
 }
 
 void ExpectFormatError(ParseBundleResult result) {
-  ASSERT_TRUE(result.second);
-  EXPECT_EQ(result.second->type, mojom::BundleParseErrorType::kFormatError);
+  ASSERT_TRUE(std::get<1>(result));
+  EXPECT_EQ(std::get<1>(result)->type,
+            mojom::BundleParseErrorType::kFormatError);
 }
 
 // Finds the response for |url|.
@@ -171,7 +172,8 @@ TEST_F(WebBundleParserTest, WrongMagic) {
   bundle[3] ^= 1;
   TestDataSource data_source(bundle);
 
-  mojom::BundleMetadataParseErrorPtr error = ParseBundle(&data_source).second;
+  mojom::BundleMetadataParseErrorPtr error =
+      std::get<1>(ParseBundle(&data_source));
   ASSERT_TRUE(error);
   EXPECT_EQ(error->type, mojom::BundleParseErrorType::kFormatError);
 }
@@ -184,7 +186,8 @@ TEST_F(WebBundleParserTest, UnknownVersion) {
   bundle[11] = 'q';
   TestDataSource data_source(bundle);
 
-  mojom::BundleMetadataParseErrorPtr error = ParseBundle(&data_source).second;
+  mojom::BundleMetadataParseErrorPtr error =
+      std::get<1>(ParseBundle(&data_source));
   ASSERT_TRUE(error);
   EXPECT_EQ(error->type, mojom::BundleParseErrorType::kVersionError);
 }
@@ -266,7 +269,7 @@ TEST_F(WebBundleParserTest, RequestURLIsValidUuidInPackage) {
                       "payload");
   TestDataSource data_source(builder.CreateBundle());
 
-  mojom::BundleMetadataPtr metadata = ParseBundle(&data_source).first;
+  mojom::BundleMetadataPtr metadata = std::get<0>(ParseBundle(&data_source));
   ASSERT_TRUE(metadata);
   ASSERT_EQ(metadata->requests.size(), 1u);
   auto location = FindResponse(metadata, GURL(uuid_in_package));
@@ -291,7 +294,7 @@ TEST_F(WebBundleParserTest, NoStatusInResponseHeaders) {
                       "payload");  // ":status" is missing.
   TestDataSource data_source(builder.CreateBundle());
 
-  mojom::BundleMetadataPtr metadata = ParseBundle(&data_source).first;
+  mojom::BundleMetadataPtr metadata = std::get<0>(ParseBundle(&data_source));
   ASSERT_TRUE(metadata);
   auto location = FindResponse(metadata, GURL("https://test.example.com/"));
   ASSERT_TRUE(location);
@@ -305,7 +308,7 @@ TEST_F(WebBundleParserTest, InvalidResponseStatus) {
                       "payload");
   TestDataSource data_source(builder.CreateBundle());
 
-  mojom::BundleMetadataPtr metadata = ParseBundle(&data_source).first;
+  mojom::BundleMetadataPtr metadata = std::get<0>(ParseBundle(&data_source));
   ASSERT_TRUE(metadata);
   auto location = FindResponse(metadata, GURL("https://test.example.com/"));
   ASSERT_TRUE(location);
@@ -320,7 +323,7 @@ TEST_F(WebBundleParserTest, ExtraPseudoInResponseHeaders) {
       "payload");
   TestDataSource data_source(builder.CreateBundle());
 
-  mojom::BundleMetadataPtr metadata = ParseBundle(&data_source).first;
+  mojom::BundleMetadataPtr metadata = std::get<0>(ParseBundle(&data_source));
   ASSERT_TRUE(metadata);
   auto location = FindResponse(metadata, GURL("https://test.example.com/"));
   ASSERT_TRUE(location);
@@ -334,7 +337,7 @@ TEST_F(WebBundleParserTest, UpperCaseCharacterInHeaderName) {
                       "payload");
   TestDataSource data_source(builder.CreateBundle());
 
-  mojom::BundleMetadataPtr metadata = ParseBundle(&data_source).first;
+  mojom::BundleMetadataPtr metadata = std::get<0>(ParseBundle(&data_source));
   ASSERT_TRUE(metadata);
   auto location = FindResponse(metadata, GURL("https://test.example.com/"));
   ASSERT_TRUE(location);
@@ -347,7 +350,7 @@ TEST_F(WebBundleParserTest, InvalidHeaderValue) {
                       {{":status", "200"}, {"content-type", "\n"}}, "payload");
   TestDataSource data_source(builder.CreateBundle());
 
-  mojom::BundleMetadataPtr metadata = ParseBundle(&data_source).first;
+  mojom::BundleMetadataPtr metadata = std::get<0>(ParseBundle(&data_source));
   ASSERT_TRUE(metadata);
   auto location = FindResponse(metadata, GURL("https://test.example.com/"));
   ASSERT_TRUE(location);
@@ -360,7 +363,7 @@ TEST_F(WebBundleParserTest, NoContentTypeWithNonEmptyContent) {
                       "payload");
   TestDataSource data_source(builder.CreateBundle());
 
-  mojom::BundleMetadataPtr metadata = ParseBundle(&data_source).first;
+  mojom::BundleMetadataPtr metadata = std::get<0>(ParseBundle(&data_source));
   ASSERT_TRUE(metadata);
   auto location = FindResponse(metadata, GURL("https://test.example.com/"));
   ASSERT_TRUE(location);
@@ -372,7 +375,7 @@ TEST_F(WebBundleParserTest, NoContentTypeWithEmptyContent) {
   builder.AddExchange("https://test.example.com/", {{":status", "301"}}, "");
   TestDataSource data_source(builder.CreateBundle());
 
-  mojom::BundleMetadataPtr metadata = ParseBundle(&data_source).first;
+  mojom::BundleMetadataPtr metadata = std::get<0>(ParseBundle(&data_source));
   ASSERT_TRUE(metadata);
   auto location = FindResponse(metadata, GURL("https://test.example.com/"));
   ASSERT_TRUE(location);
@@ -391,7 +394,7 @@ TEST_F(WebBundleParserTest, AllKnownSectionInCritical) {
   builder.AddSection("critical", cbor::Value(critical_section));
   TestDataSource data_source(builder.CreateBundle());
 
-  mojom::BundleMetadataPtr metadata = ParseBundle(&data_source).first;
+  mojom::BundleMetadataPtr metadata = std::get<0>(ParseBundle(&data_source));
   ASSERT_TRUE(metadata);
 }
 
@@ -422,7 +425,7 @@ TEST_F(WebBundleParserTest, EmptySignaturesSection) {
   builder.AddSection("signatures", cbor::Value(signatures_section));
   TestDataSource data_source(builder.CreateBundle());
 
-  mojom::BundleMetadataPtr metadata = ParseBundle(&data_source).first;
+  mojom::BundleMetadataPtr metadata = std::get<0>(ParseBundle(&data_source));
   ASSERT_TRUE(metadata);
   EXPECT_TRUE(metadata->authorities.empty());
   EXPECT_TRUE(metadata->vouched_subsets.empty());
@@ -453,7 +456,7 @@ TEST_F(WebBundleParserTest, SignaturesSection) {
 
   TestDataSource data_source(builder.CreateBundle());
 
-  mojom::BundleMetadataPtr metadata = ParseBundle(&data_source).first;
+  mojom::BundleMetadataPtr metadata = std::get<0>(ParseBundle(&data_source));
   ASSERT_TRUE(metadata);
 
   ASSERT_EQ(metadata->authorities.size(), 1u);
@@ -525,7 +528,7 @@ TEST_F(WebBundleParserTest, MultipleSignatures) {
 
   TestDataSource data_source(builder.CreateBundle());
 
-  mojom::BundleMetadataPtr metadata = ParseBundle(&data_source).first;
+  mojom::BundleMetadataPtr metadata = std::get<0>(ParseBundle(&data_source));
   ASSERT_TRUE(metadata);
 
   ASSERT_EQ(metadata->authorities.size(), 2u);
@@ -550,7 +553,7 @@ TEST_F(WebBundleParserTest, MultipleSignatures) {
 TEST_F(WebBundleParserTest, ParseGoldenFile) {
   TestDataSource data_source(base::FilePath(FILE_PATH_LITERAL("hello_b2.wbn")));
 
-  mojom::BundleMetadataPtr metadata = ParseBundle(&data_source).first;
+  mojom::BundleMetadataPtr metadata = std::get<0>(ParseBundle(&data_source));
   ASSERT_TRUE(metadata);
   ASSERT_EQ(metadata->requests.size(), 4u);
   EXPECT_EQ(metadata->primary_url, "https://test.example.org/");
@@ -582,7 +585,7 @@ TEST_F(WebBundleParserTest, ParseSignedFile) {
   TestDataSource data_source(
       base::FilePath(FILE_PATH_LITERAL("hello_signed.wbn")));
 
-  mojom::BundleMetadataPtr metadata = ParseBundle(&data_source).first;
+  mojom::BundleMetadataPtr metadata = std::get<0>(ParseBundle(&data_source));
   ASSERT_TRUE(metadata);
   EXPECT_EQ(metadata->authorities.size(), 1u);
   ASSERT_EQ(metadata->vouched_subsets.size(), 1u);
@@ -611,7 +614,7 @@ TEST_F(WebBundleParserTest, SingleEntry) {
                       "payload");
   TestDataSource data_source(builder.CreateBundle());
 
-  mojom::BundleMetadataPtr metadata = ParseBundle(&data_source).first;
+  mojom::BundleMetadataPtr metadata = std::get<0>(ParseBundle(&data_source));
   ASSERT_TRUE(metadata);
   ASSERT_EQ(metadata->version, mojom::BundleFormatVersion::kB2);
   ASSERT_EQ(metadata->requests.size(), 1u);
@@ -633,7 +636,7 @@ TEST_F(WebBundleParserTest, NoPrimaryUrlSingleEntry) {
                       "payload");
   TestDataSource data_source(builder.CreateBundle());
 
-  mojom::BundleMetadataPtr metadata = ParseBundle(&data_source).first;
+  mojom::BundleMetadataPtr metadata = std::get<0>(ParseBundle(&data_source));
   ASSERT_TRUE(metadata);
   ASSERT_EQ(metadata->requests.size(), 1u);
   auto location = FindResponse(metadata, GURL("https://test.example.com/"));
@@ -656,7 +659,8 @@ TEST_F(WebBundleParserTest, RelativeURL) {
   TestDataSource data_source(builder.CreateBundle());
 
   const GURL base_url("https://test.example.com/dir/test.wbn");
-  mojom::BundleMetadataPtr metadata = ParseBundle(&data_source, base_url).first;
+  mojom::BundleMetadataPtr metadata =
+      std::get<0>(ParseBundle(&data_source, base_url));
   EXPECT_EQ(metadata->primary_url,
             "https://test.example.com/dir/path/to/primary_url");
   ASSERT_TRUE(metadata);
@@ -676,7 +680,7 @@ TEST_F(WebBundleParserTest, RandomAccessContext) {
   std::vector<uint8_t> bundle = CreateSmallBundle();
   TestDataSource data_source(bundle, /*is_random_access_context=*/true);
 
-  mojom::BundleMetadataPtr metadata = ParseBundle(&data_source).first;
+  mojom::BundleMetadataPtr metadata = std::get<0>(ParseBundle(&data_source));
   ASSERT_TRUE(metadata);
 
   auto location = FindResponse(metadata, GURL("https://test.example.com/"));
@@ -695,7 +699,7 @@ TEST_F(WebBundleParserTest, RandomAccessContextPrependedData) {
                 {'o', 't', 'h', 'e', 'r', ' ', 'd', 'a', 't', 'a'});
   TestDataSource data_source(bundle, /*is_random_access_context=*/true);
 
-  mojom::BundleMetadataPtr metadata = ParseBundle(&data_source).first;
+  mojom::BundleMetadataPtr metadata = std::get<0>(ParseBundle(&data_source));
   ASSERT_TRUE(metadata);
 
   auto location = FindResponse(metadata, GURL("https://test.example.com/"));
