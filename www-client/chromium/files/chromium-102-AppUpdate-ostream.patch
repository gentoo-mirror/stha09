From abab9c681336e69eab51e0fee13c15210dc5aca Mon Sep 17 00:00:00 2001
From: Stephan Hartmann <stha09@googlemail.com>
Date: Sun, 20 Mar 2022 18:11:59 +0000
Subject: [PATCH] libstdc++: fix ostream operator<< for apps::AppUpdate

std::unique_ptr has no operator<< in libstdc++. Even it would
exist, it would just return the pointer value and not the content.
Implement the necessary ToString() methods.

---
 .../app_service/public/cpp/app_update.cc      |  2 +-
 .../app_service/public/cpp/intent_filter.cc   | 46 +++++++++++++++++++
 .../app_service/public/cpp/intent_filter.h    | 22 +++++----
 3 files changed, 61 insertions(+), 9 deletions(-)

diff --git a/components/services/app_service/public/cpp/app_update.cc b/components/services/app_service/public/cpp/app_update.cc
index efb6a7f..1d703e1 100644
--- a/components/services/app_service/public/cpp/app_update.cc
+++ b/components/services/app_service/public/cpp/app_update.cc
@@ -1055,7 +1055,7 @@ std::ostream& operator<<(std::ostream& out, const AppUpdate& app) {
 
   out << "IntentFilters: " << std::endl;
   for (const auto& filter : app.IntentFilters()) {
-    out << filter << std::endl;
+    out << filter->ToString() << std::endl;
   }
 
   out << "ResizeLocked: " << PRINT_OPTIONAL_VALUE(ResizeLocked) << std::endl;
diff --git a/components/services/app_service/public/cpp/intent_filter.cc b/components/services/app_service/public/cpp/intent_filter.cc
index 7cc8315..250ee6f 100644
--- a/components/services/app_service/public/cpp/intent_filter.cc
+++ b/components/services/app_service/public/cpp/intent_filter.cc
@@ -6,6 +6,14 @@
 
 namespace apps {
 
+APP_ENUM_TO_STRING(ConditionType,
+                   kScheme,
+                   kHost,
+                   kPattern,
+                   kAction,
+                   kMimeType,
+                   kFile)
+
 ConditionValue::ConditionValue(const std::string& value,
                                PatternMatchType match_type)
     : value(value), match_type(match_type) {}
@@ -20,6 +30,18 @@ bool ConditionValue::operator!=(const ConditionValue& other) const {
   return !(*this == other);
 }
 
+std::string ConditionValue::ToString() const {
+  std::stringstream out;
+  if (match_type == PatternMatchType::kSuffix) {
+    out << "*";
+  }
+  out << value;
+  if (match_type == PatternMatchType::kPrefix) {
+    out << "*";
+  }
+  return out.str();
+}
+
 Condition::Condition(ConditionType condition_type,
                      ConditionValues condition_values)
     : condition_type(condition_type),
@@ -55,6 +72,15 @@ ConditionPtr Condition::Clone() const {
   return std::make_unique<Condition>(condition_type, std::move(values));
 }
 
+std::string Condition::ToString() const {
+  std::stringstream out;
+  out << " - " << EnumToString(condition_type) << ":";
+  for (const auto& condition_value : condition_values) {
+    out << " " << condition_value->ToString();
+  }
+  return out.str();
+}
+
 IntentFilter::IntentFilter() = default;
 IntentFilter::~IntentFilter() = default;
 
@@ -186,6 +213,23 @@ bool IntentFilter::IsFileExtensionsFilter() {
   return true;
 }
 
+std::string IntentFilter::ToString() const {
+  std::stringstream out;
+  if (activity_name.has_value()) {
+    out << " activity_name: " << activity_name.value() << std::endl;
+  }
+  if (activity_label.has_value()) {
+    out << " activity_label: " << activity_label.value() << std::endl;
+  }
+  if (!conditions.empty()) {
+    out << " conditions:" << std::endl;
+    for (const auto& condition : conditions) {
+      out << condition->ToString() << std::endl;
+    }
+  }
+  return out.str();
+}
+
 IntentFilters CloneIntentFilters(const IntentFilters& intent_filters) {
   IntentFilters ret;
   for (const auto& intent_filter : intent_filters) {
diff --git a/components/services/app_service/public/cpp/intent_filter.h b/components/services/app_service/public/cpp/intent_filter.h
index 042f43b..0639cfc 100644
--- a/components/services/app_service/public/cpp/intent_filter.h
+++ b/components/services/app_service/public/cpp/intent_filter.h
@@ -12,6 +12,7 @@
 
 #include "base/component_export.h"
 #include "base/containers/flat_map.h"
+#include "components/services/app_service/public/cpp/macros.h"
 #include "components/services/app_service/public/mojom/types.mojom.h"
 #include "third_party/abseil-cpp/absl/types/optional.h"
 
@@ -31,14 +32,13 @@ enum class IntentFilterMatchLevel {
 };
 
 // The intent filter matching condition types.
-enum class ConditionType {
-  kScheme,    // Matches the URL scheme (e.g. https, tel).
-  kHost,      // Matches the URL host (e.g. www.google.com).
-  kPattern,   // Matches the URL pattern (e.g. /abc/*).
-  kAction,    // Matches the action type (e.g. view, send).
-  kMimeType,  // Matches the top-level mime type (e.g. text/plain).
-  kFile,      // Matches against all files.
-};
+ENUM(ConditionType,
+     kScheme,    // Matches the URL scheme (e.g. https, tel).
+     kHost,      // Matches the URL host (e.g. www.google.com).
+     kPattern,   // Matches the URL pattern (e.g. /abc/*).
+     kAction,    // Matches the action type (e.g. view, send).
+     kMimeType,  // Matches the top-level mime type (e.g. text/plain).
+     kFile)      // Matches against all files.
 
 // The pattern match type for intent filter pattern condition.
 enum class PatternMatchType {
@@ -64,6 +64,8 @@ struct COMPONENT_EXPORT(APP_TYPES) ConditionValue {
   bool operator==(const ConditionValue& other) const;
   bool operator!=(const ConditionValue& other) const;
 
+  std::string ToString() const;
+
   std::string value;
   PatternMatchType match_type;  // This will be None for non pattern conditions.
 };
@@ -85,6 +87,8 @@ struct COMPONENT_EXPORT(APP_TYPES) Condition {
 
   std::unique_ptr<Condition> Clone() const;
 
+  std::string ToString() const;
+
   ConditionType condition_type;
   ConditionValues condition_values;
 };
@@ -129,6 +133,8 @@ struct COMPONENT_EXPORT(APP_TYPES) IntentFilter {
   // Returns true if the filter only contains file extension pattern matches.
   bool IsFileExtensionsFilter();
 
+  std::string ToString() const;
+
   Conditions conditions;
 
   // Activity which registered this filter. We only fill this field for ARC
-- 
2.34.1

