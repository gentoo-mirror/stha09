From 9b337bc4482087376c7e7d0d04f244f12bd4511a Mon Sep 17 00:00:00 2001
From: Stephan Hartmann <stha09@googlemail.com>
Date: Sat, 30 Jan 2021 12:00:24 +0000
Subject: [PATCH] GCC: fix missing integer/double vector type casts

GCC does not automatically cast __m128i/__m256i to __m128d/__256d
and vice versa.
---
 base/allocator/partition_allocator/pcscan.cc | 26 ++++++++++----------
 1 file changed, 13 insertions(+), 13 deletions(-)

diff --git a/base/allocator/partition_allocator/pcscan.cc b/base/allocator/partition_allocator/pcscan.cc
index a80c467..e8b0267 100644
--- a/base/allocator/partition_allocator/pcscan.cc
+++ b/base/allocator/partition_allocator/pcscan.cc
@@ -412,9 +412,9 @@ class PCScan<thread_safe>::PCScanTask::ScanLoop final {
         !((reinterpret_cast<char*>(end) - reinterpret_cast<char*>(begin)) %
           kAlignmentRequirement));
 
-    const __m128i vbase = _mm_set1_epi64x(normal_bucket_pool_base_);
-    const __m128d cage_mask =
-        _mm_set1_epi64x(PartitionAddressSpace::NormalBucketPoolBaseMask());
+    const __m128d vbase = __m128d(_mm_set1_epi64x(normal_bucket_pool_base_));
+    const __m128d cage_mask = __m128d(
+        _mm_set1_epi64x(PartitionAddressSpace::NormalBucketPoolBaseMask()));
 
     size_t quarantine_size = 0;
     for (uintptr_t* payload = begin; payload < end; payload += kWordsInVector) {
@@ -430,14 +430,14 @@ class PCScan<thread_safe>::PCScanTask::ScanLoop final {
       if (mask & 0b01) {
         quarantine_size +=
             pcscan_task_.TryMarkObjectInNormalBucketPool<BitmapLookupPolicy>(
-                _mm_cvtsi128_si64(maybe_ptrs));
+                _mm_cvtsi128_si64(__m128i(maybe_ptrs)));
       }
       if (mask & 0b10) {
         // Extraction intrinsics for qwords are only supported in SSE4.1, so
         // instead we reshuffle dwords with pshufd. The mask is used to move the
         // 4th and 3rd dwords into the second and first position.
         static constexpr int kSecondWordMask = (3 << 2) | (2 << 0);
-        const __m128i shuffled = _mm_shuffle_epi32(maybe_ptrs, kSecondWordMask);
+        const __m128i shuffled = _mm_shuffle_epi32(__m128i(maybe_ptrs), kSecondWordMask);
         quarantine_size +=
             pcscan_task_.TryMarkObjectInNormalBucketPool<BitmapLookupPolicy>(
                 _mm_cvtsi128_si64(shuffled));
@@ -453,16 +453,16 @@ class PCScan<thread_safe>::PCScanTask::ScanLoop final {
     PA_DCHECK(!(reinterpret_cast<uintptr_t>(begin) % kAlignmentRequirement));
 
     const __m256i vbase = _mm256_set1_epi64x(normal_bucket_pool_base_);
-    const __m256i cage_mask =
-        _mm256_set1_epi64x(PartitionAddressSpace::NormalBucketPoolBaseMask());
+    const __m256d cage_mask = __m256d(
+        _mm256_set1_epi64x(PartitionAddressSpace::NormalBucketPoolBaseMask()));
 
     size_t quarantine_size = 0;
     uintptr_t* payload = begin;
     for (; payload < (end - kWordsInVector); payload += kWordsInVector) {
       const __m256d maybe_ptrs =
           _mm256_load_pd(reinterpret_cast<double*>(payload));
-      const __m256d vand = _mm256_and_pd(maybe_ptrs, cage_mask);
-      const __m256i vcmp = _mm256_cmpeq_epi64(vand, vbase);
+      const __m256i vand = __m256i(_mm256_and_pd(maybe_ptrs, cage_mask));
+      const __m256d vcmp = __m256d(_mm256_cmpeq_epi64(vand, vbase));
       const int mask = _mm256_movemask_pd(vcmp);
       if (LIKELY(!mask))
         continue;
@@ -471,19 +471,19 @@ class PCScan<thread_safe>::PCScanTask::ScanLoop final {
       if (mask & 0b0001)
         quarantine_size +=
             pcscan_task_.TryMarkObjectInNormalBucketPool<BitmapLookupPolicy>(
-                _mm256_extract_epi64(maybe_ptrs, 0));
+                _mm256_extract_epi64(__m256i(maybe_ptrs), 0));
       if (mask & 0b0010)
         quarantine_size +=
             pcscan_task_.TryMarkObjectInNormalBucketPool<BitmapLookupPolicy>(
-                _mm256_extract_epi64(maybe_ptrs, 1));
+                _mm256_extract_epi64(__m256i(maybe_ptrs), 1));
       if (mask & 0b0100)
         quarantine_size +=
             pcscan_task_.TryMarkObjectInNormalBucketPool<BitmapLookupPolicy>(
-                _mm256_extract_epi64(maybe_ptrs, 2));
+                _mm256_extract_epi64(__m256i(maybe_ptrs), 2));
       if (mask & 0b1000)
         quarantine_size +=
             pcscan_task_.TryMarkObjectInNormalBucketPool<BitmapLookupPolicy>(
-                _mm256_extract_epi64(maybe_ptrs, 3));
+                _mm256_extract_epi64(__m256i(maybe_ptrs), 3));
     }
 
     quarantine_size += RunUnvectorized(payload, end);
-- 
2.26.2

