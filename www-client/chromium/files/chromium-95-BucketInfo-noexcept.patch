From ef4c2cc8fc5f13fca1b768620c3309622683cb92 Mon Sep 17 00:00:00 2001
From: Stephan Hartmann <stha09@googlemail.com>
Date: Sat, 21 Aug 2021 20:53:32 +0000
Subject: [PATCH] GCC: fix noexcept in storage::BucketInfo

Move constructor and move assignment operator for storage::BucketInfo
is marked noexcept. However, move constructor and assignment operator
of member blink::StorageKey are not noexcept. Therefore, GCC fails to
compile storage::BucketInfo. Fix this by adding noexcept to move
constructor and assignment operator of blink::StorageKey and
net::SchemefulSite.
---
 net/base/schemeful_site.cc                                | 4 ++--
 net/base/schemeful_site.h                                 | 4 ++--
 third_party/blink/public/common/storage_key/storage_key.h | 4 ++--
 3 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/net/base/schemeful_site.cc b/net/base/schemeful_site.cc
index 528c0a0..6484b20 100644
--- a/net/base/schemeful_site.cc
+++ b/net/base/schemeful_site.cc
@@ -91,10 +91,10 @@ SchemefulSite::SchemefulSite(const GURL& url)
     : SchemefulSite(url::Origin::Create(url)) {}
 
 SchemefulSite::SchemefulSite(const SchemefulSite& other) = default;
-SchemefulSite::SchemefulSite(SchemefulSite&& other) = default;
+SchemefulSite::SchemefulSite(SchemefulSite&& other) noexcept = default;
 
 SchemefulSite& SchemefulSite::operator=(const SchemefulSite& other) = default;
-SchemefulSite& SchemefulSite::operator=(SchemefulSite&& other) = default;
+SchemefulSite& SchemefulSite::operator=(SchemefulSite&& other) noexcept = default;
 
 // static
 bool SchemefulSite::FromWire(const url::Origin& site_as_origin,
diff --git a/net/base/schemeful_site.h b/net/base/schemeful_site.h
index f940fbb..f118076 100644
--- a/net/base/schemeful_site.h
+++ b/net/base/schemeful_site.h
@@ -69,10 +69,10 @@ class NET_EXPORT SchemefulSite {
   explicit SchemefulSite(const GURL& url);
 
   SchemefulSite(const SchemefulSite& other);
-  SchemefulSite(SchemefulSite&& other);
+  SchemefulSite(SchemefulSite&& other) noexcept;
 
   SchemefulSite& operator=(const SchemefulSite& other);
-  SchemefulSite& operator=(SchemefulSite&& other);
+  SchemefulSite& operator=(SchemefulSite&& other) noexcept;
 
   // Tries to construct an instance from a (potentially untrusted) value of the
   // internal `site_as_origin_` that got received over an RPC.
diff --git a/third_party/blink/public/common/storage_key/storage_key.h b/third_party/blink/public/common/storage_key/storage_key.h
index 77e07a8..22d2aff 100644
--- a/third_party/blink/public/common/storage_key/storage_key.h
+++ b/third_party/blink/public/common/storage_key/storage_key.h
@@ -56,8 +56,8 @@ class BLINK_COMMON_EXPORT StorageKey {
   // Copyable and Moveable.
   StorageKey(const StorageKey& other) = default;
   StorageKey& operator=(const StorageKey& other) = default;
-  StorageKey(StorageKey&& other) = default;
-  StorageKey& operator=(StorageKey&& other) = default;
+  StorageKey(StorageKey&& other) noexcept = default;
+  StorageKey& operator=(StorageKey&& other) noexcept = default;
 
   ~StorageKey() = default;
 
-- 
2.31.1

