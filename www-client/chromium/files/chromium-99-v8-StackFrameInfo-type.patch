From 7e1e311a569a984b9eb40111bc213dd1aa8aa0bc Mon Sep 17 00:00:00 2001
From: Milad Fa <mfarazma@redhat.com>
Date: Tue, 04 Jan 2022 12:23:04 -0500
Subject: [PATCH] Fix compilation errors with gcc

Naming a class member function the same as a class name
could cause compilation issues with gcc:
```
error: changes meaning of 'StackFrameInfo' from 'class
v8::internal::StackFrameInfo'
```
This CL changes the function name to fix the problem.


Change-Id: I085018504deefefa99dbf2ff8638bc0e872fdbc8
Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/3366703
Reviewed-by: Benedikt Meurer <bmeurer@chromium.org>
Commit-Queue: Milad Farazmand <mfarazma@redhat.com>
Cr-Commit-Position: refs/heads/main@{#78484}
---

diff --git a/v8/src/execution/frames.cc b/v8/src/execution/frames.cc
index 53941d9..387a0ef 100644
--- a/v8/src/execution/frames.cc
+++ b/v8/src/execution/frames.cc
@@ -1593,8 +1593,8 @@
   return handle(function_->context().native_context(), isolate());
 }
 
-Handle<StackFrameInfo> FrameSummary::JavaScriptFrameSummary::StackFrameInfo()
-    const {
+Handle<StackFrameInfo>
+FrameSummary::JavaScriptFrameSummary::CreateStackFrameInfo() const {
   Handle<SharedFunctionInfo> shared(function_->shared(), isolate());
   Handle<Script> script(Script::cast(shared->script()), isolate());
   Handle<String> function_name = JSFunction::GetDebugName(function_);
@@ -1655,7 +1655,8 @@
   return handle(wasm_instance()->native_context(), isolate());
 }
 
-Handle<StackFrameInfo> FrameSummary::WasmFrameSummary::StackFrameInfo() const {
+Handle<StackFrameInfo> FrameSummary::WasmFrameSummary::CreateStackFrameInfo()
+    const {
   Handle<String> function_name =
       GetWasmFunctionDebugName(isolate(), wasm_instance(), function_index());
   return isolate()->factory()->NewStackFrameInfo(script(), SourcePosition(),
@@ -1730,7 +1731,7 @@
 FRAME_SUMMARY_DISPATCH(int, SourcePosition)
 FRAME_SUMMARY_DISPATCH(int, SourceStatementPosition)
 FRAME_SUMMARY_DISPATCH(Handle<Context>, native_context)
-FRAME_SUMMARY_DISPATCH(Handle<StackFrameInfo>, StackFrameInfo)
+FRAME_SUMMARY_DISPATCH(Handle<StackFrameInfo>, CreateStackFrameInfo)
 
 #undef FRAME_SUMMARY_DISPATCH
 
diff --git a/v8/src/execution/frames.h b/v8/src/execution/frames.h
index 48ae0ad..b1ece34 100644
--- a/v8/src/execution/frames.h
+++ b/v8/src/execution/frames.h
@@ -394,7 +394,7 @@
     int SourceStatementPosition() const;
     Handle<Object> script() const;
     Handle<Context> native_context() const;
-    Handle<StackFrameInfo> StackFrameInfo() const;
+    Handle<StackFrameInfo> CreateStackFrameInfo() const;
 
    private:
     Handle<Object> receiver_;
@@ -424,7 +424,7 @@
     Handle<WasmInstanceObject> wasm_instance() const { return wasm_instance_; }
     Handle<Context> native_context() const;
     bool at_to_number_conversion() const { return at_to_number_conversion_; }
-    Handle<StackFrameInfo> StackFrameInfo() const;
+    Handle<StackFrameInfo> CreateStackFrameInfo() const;
 
    private:
     Handle<WasmInstanceObject> wasm_instance_;
@@ -458,7 +458,7 @@
   int SourcePosition() const;
   int SourceStatementPosition() const;
   Handle<Context> native_context() const;
-  Handle<StackFrameInfo> StackFrameInfo() const;
+  Handle<StackFrameInfo> CreateStackFrameInfo() const;
 
 #define FRAME_SUMMARY_CAST(kind_, type, field, desc)      \
   bool Is##desc() const { return base_.kind() == kind_; } \
diff --git a/v8/src/execution/isolate.cc b/v8/src/execution/isolate.cc
index 60534b0..ef080d8 100644
--- a/v8/src/execution/isolate.cc
+++ b/v8/src/execution/isolate.cc
@@ -1262,7 +1262,7 @@
     if (index_ >= limit_) return false;
     // Skip frames that aren't subject to debugging.
     if (!summary.is_subject_to_debugging()) return true;
-    Handle<StackFrameInfo> frame = summary.StackFrameInfo();
+    Handle<StackFrameInfo> frame = summary.CreateStackFrameInfo();
     frames_ = FixedArray::SetAndGrow(isolate_, frames_, index_++, frame);
     return true;
   }
